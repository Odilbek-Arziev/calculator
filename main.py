import streamlit as st
import matplotlib.pyplot as plt


def mortgage_calculator(price, down_payment, annual_rate, monthly_payment=None, years=None):
    loan_amount = price - down_payment
    monthly_rate = annual_rate / 100 / 12

    if years is not None:
        months = years * 12
        payment = loan_amount * (monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
        payment = round(payment, 2)

        total_paid = payment * months
        overpayment = round(total_paid - loan_amount, 2)

        # –≥—Ä–∞—Ñ–∏–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è
        balance = loan_amount
        balances = []
        for _ in range(months):
            interest = balance * monthly_rate
            balance = balance + interest - payment
            balances.append(max(balance, 0))

        return payment, f"{years} –ª–µ—Ç", overpayment, balances

    if monthly_payment is not None:
        if monthly_payment <= loan_amount * monthly_rate:
            return None, None, "–ü–ª–∞—Ç—ë–∂ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –∫—Ä–µ–¥–∏—Ç –Ω–µ –ø–æ–≥–∞—Å–∏—Ç—Å—è.", []

        balance = loan_amount
        months_needed = 0
        total_paid = 0
        balances = []

        while balance > 0 and months_needed < 1000 * 12:
            interest = balance * monthly_rate
            balance = balance + interest - monthly_payment
            balances.append(max(balance, 0))
            total_paid += monthly_payment
            months_needed += 1

        years_needed = months_needed // 12
        months_extra = months_needed % 12
        overpayment = round(total_paid - loan_amount, 2)

        return monthly_payment, f"{years_needed} –ª–µ—Ç {months_extra} –º–µ—Å.", overpayment, balances

    return None, None, "–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ —Å—Ä–æ–∫, –ª–∏–±–æ –ø–ª–∞—Ç—ë–∂.", []


# --- Streamlit UI ---
st.title("üè¶ –ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –≥—Ä–∞—Ñ–∏–∫–æ–º")

price = st.number_input("–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–ª—å—è ($)", min_value=1000, step=1000)
down_payment = st.number_input("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ($)", min_value=0, step=500)
rate = st.number_input("–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)", min_value=1.0, step=0.1)

col1, col2 = st.columns(2)
with col1:
    monthly_payment = st.number_input("–ñ–µ–ª–∞–µ–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ($)", min_value=0, step=100)
with col2:
    years = st.number_input("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)", min_value=0, step=1)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    monthly_payment_val = monthly_payment if monthly_payment > 0 else None
    years_val = years if years > 0 else None

    payment, term, overpayment, balances = mortgage_calculator(
        price, down_payment, rate, monthly_payment_val, years_val
    )

    if isinstance(overpayment, str):
        st.error(overpayment)
    else:
        st.success(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: **{payment}$**")
        st.info(f"–°—Ä–æ–∫: **{term}**")
        st.warning(f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{overpayment}$**")

        # –≥—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞
        st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞")
        fig, ax = plt.subplots()
        ax.plot(range(1, len(balances) + 1), balances, label="–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞")
        ax.set_xlabel("–ú–µ—Å—è—Ü—ã")
        ax.set_ylabel("–û—Å—Ç–∞—Ç–æ–∫ ($)")
        ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞")
        ax.legend()
        st.pyplot(fig)
