import streamlit as st
import pandas as pd

def mortgage_calculator(price, down_payment, annual_rate, monthly_payment=None, years=None):
    loan_amount = price - down_payment
    monthly_rate = annual_rate / 100 / 12

    balances = []
    schedule = []

    if years is not None:
        months = years * 12
        payment = loan_amount * (monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
        payment = round(payment, 2)

        total_paid = payment * months
        overpayment = round(total_paid - loan_amount, 2)

        balance = loan_amount
        for month in range(1, months + 1):
            interest = round(balance * monthly_rate, 2)
            principal = round(payment - interest, 2)
            balance = round(balance - principal, 2)
            balances.append(balance)
            schedule.append({
                "–ú–µ—Å—è—Ü": month,
                "–ü–ª–∞—Ç—ë–∂": payment,
                "–ü—Ä–æ—Ü–µ–Ω—Ç—ã": interest,
                "–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞": principal,
                "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": max(balance, 0)
            })

        return payment, f"{years} –ª–µ—Ç", overpayment, balances, pd.DataFrame(schedule)

    if monthly_payment is not None:
        if monthly_payment <= loan_amount * monthly_rate:
            return None, None, "–ü–ª–∞—Ç—ë–∂ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –∫—Ä–µ–¥–∏—Ç –Ω–µ –ø–æ–≥–∞—Å–∏—Ç—Å—è.", [], pd.DataFrame()

        balance = loan_amount
        months_needed = 0
        total_paid = 0

        while balance > 0 and months_needed < 1000 * 12:
            interest = round(balance * monthly_rate, 2)
            principal = round(monthly_payment - interest, 2)
            balance = round(balance - principal, 2)
            balances.append(max(balance, 0))
            schedule.append({
                "–ú–µ—Å—è—Ü": months_needed + 1,
                "–ü–ª–∞—Ç—ë–∂": monthly_payment,
                "–ü—Ä–æ—Ü–µ–Ω—Ç—ã": interest,
                "–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞": principal,
                "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": max(balance, 0)
            })
            total_paid += monthly_payment
            months_needed += 1

        years_needed = months_needed // 12
        months_extra = months_needed % 12
        overpayment = round(total_paid - loan_amount, 2)

        return monthly_payment, f"{years_needed} –ª–µ—Ç {months_extra} –º–µ—Å.", overpayment, balances, pd.DataFrame(schedule)

    return None, None, "–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ —Å—Ä–æ–∫, –ª–∏–±–æ –ø–ª–∞—Ç—ë–∂.", [], pd.DataFrame()


# --- Streamlit UI ---
st.title("üè¶ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

price = st.number_input("–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–ª—å—è ($)", min_value=1000, step=1000, value=50000)
down_payment = st.number_input("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ($)", min_value=0, step=500, value=10000)
rate = st.number_input("–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)", min_value=1.0, step=0.1, value=10.0)
years = st.number_input("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)", min_value=1, step=1, value=10)

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
loan_amount = price - down_payment
monthly_rate = rate / 100 / 12
months = years * 12
min_payment = round(loan_amount * monthly_rate * 1.01, 2)  # —á—É—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
default_payment = round(loan_amount * (monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1), 2)

st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
monthly_payment = st.slider(
    "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ($)",
    min_value=int(min_payment),
    max_value=int(default_payment*3),
    value=int(default_payment),
    step=50
)

# –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—á–µ—Ç
payment, term, overpayment, balances, schedule = mortgage_calculator(
    price, down_payment, rate, monthly_payment=monthly_payment
)

st.success(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: **{payment}$**")
st.info(f"–°—Ä–æ–∫: **{term}**")
st.warning(f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{overpayment}$**")

if balances:
    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞")
    st.line_chart(pd.DataFrame({"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": balances}))

    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º")
    st.dataframe(schedule)

    st.subheader("üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã")
    total_principal = price - down_payment
    pie_data = pd.DataFrame({
        "–°—É–º–º–∞": [total_principal, overpayment],
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞", "–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"]
    })
    st.pyplot(pie_data.plot.pie(y='–°—É–º–º–∞', labels=pie_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'], autopct='%1.1f%%', legend=False).get_figure())
