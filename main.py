import streamlit as st
import pandas as pd
import plotly.express as px


def mortgage_calculator(price, down_payment, annual_rate, monthly_payment=None, years=None):
    loan_amount = price - down_payment
    monthly_rate = annual_rate / 100 / 12
    balances = []
    schedule = []

    if years is not None:
        months = years * 12
        payment = loan_amount * (monthly_rate * (1 + monthly_rate) ** months) / ((1 + monthly_rate) ** months - 1)
        payment = round(payment, 2)
        total_paid = payment * months
        overpayment = round(total_paid - loan_amount, 2)
        balance = loan_amount
        for month in range(1, months + 1):
            interest = round(balance * monthly_rate, 2)
            principal = round(payment - interest, 2)
            balance = round(balance - principal, 2)
            balances.append(balance)
            schedule.append({
                "–ú–µ—Å—è—Ü": month,
                "–ü–ª–∞—Ç—ë–∂": payment,
                "–ü—Ä–æ—Ü–µ–Ω—Ç—ã": interest,
                "–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞": principal,
                "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": max(balance, 0)
            })
        return payment, f"{years} –ª–µ—Ç", overpayment, balances, pd.DataFrame(schedule)

    if monthly_payment is not None:
        if monthly_payment <= loan_amount * monthly_rate:
            return None, None, "–ü–ª–∞—Ç—ë–∂ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –∫—Ä–µ–¥–∏—Ç –Ω–µ –ø–æ–≥–∞—Å–∏—Ç—Å—è.", [], pd.DataFrame()
        balance = loan_amount
        months_needed = 0
        total_paid = 0
        while balance > 0 and months_needed < 1000 * 12:
            interest = round(balance * monthly_rate, 2)
            principal = round(monthly_payment - interest, 2)
            balance = round(balance - principal, 2)
            balances.append(max(balance, 0))
            schedule.append({
                "–ú–µ—Å—è—Ü": months_needed + 1,
                "–ü–ª–∞—Ç—ë–∂": monthly_payment,
                "–ü—Ä–æ—Ü–µ–Ω—Ç—ã": interest,
                "–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞": principal,
                "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": max(balance, 0)
            })
            total_paid += monthly_payment
            months_needed += 1
        years_needed = months_needed // 12
        months_extra = months_needed % 12
        overpayment = round(total_paid - loan_amount, 2)
        return monthly_payment, f"{years_needed} –ª–µ—Ç {months_extra} –º–µ—Å.", overpayment, balances, pd.DataFrame(schedule)

    return None, None, "–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ —Å—Ä–æ–∫, –ª–∏–±–æ –ø–ª–∞—Ç—ë–∂.", [], pd.DataFrame()


st.title("üè¶ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")

currency = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", ("USD", "UZS"))

if currency == "UZS":
    usd_to_uzs = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å USD –∫ UZS", min_value=1000, value=11500, step=100)
else:
    usd_to_uzs = 1

price_input = st.number_input(
    f"–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–ª—å—è ({currency})",
    min_value=1000 if currency == "USD" else 1_000_000,
    step=1000 if currency == "USD" else 1_000_000,
    value=50_000 if currency == "USD" else 50_000 * usd_to_uzs
)
down_payment_input = st.number_input(
    f"–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ({currency})",
    min_value=0,
    step=1000 if currency == "USD" else 1_000_000,
    value=10_000 if currency == "USD" else 10_000 * usd_to_uzs
)

years_input = st.number_input("–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)", min_value=1, step=1, value=10)

price_usd = price_input / usd_to_uzs
down_payment_usd = down_payment_input / usd_to_uzs

monthly_rate = st.number_input("–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)", min_value=1.0, step=0.1, value=10.0) / 100 / 12
months_total = years_input * 12
default_payment = round(
    (price_usd - down_payment_usd) * (monthly_rate * (1 + monthly_rate) ** months_total) / (
            (1 + monthly_rate) ** months_total - 1), 2
)
min_payment = round((price_usd - down_payment_usd) * monthly_rate * 1.01, 2)

col1, col2 = st.columns(2)
with col1:
    monthly_slider = st.slider(
        f"–ü–æ–ª–∑—É–Ω–æ–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ({currency})",
        min_value=int(min_payment * usd_to_uzs),
        max_value=int(default_payment * 3 * usd_to_uzs),
        value=int(default_payment * usd_to_uzs),
        step=50 if currency == "USD" else 50_000
    )
with col2:
    monthly_input = st.number_input(
        f"–¢–æ—á–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ({currency})",
        min_value=int(min_payment * usd_to_uzs),
        max_value=int(default_payment * 3 * usd_to_uzs),
        value=int(monthly_slider),
        step=50 if currency == "USD" else 50_000
    )

monthly_usd = monthly_input / usd_to_uzs

payment, term, overpayment, balances, schedule = mortgage_calculator(
    price_usd, down_payment_usd, monthly_rate * 12 * 100, monthly_payment=monthly_usd
)

payment_display = round(payment * usd_to_uzs, 2) if payment else 0
overpayment_display = round(overpayment * usd_to_uzs, 2) if overpayment else 0
balances_display = [round(b * usd_to_uzs, 2) for b in balances]
schedule_display = schedule.copy()
for col in ["–ü–ª–∞—Ç—ë–∂", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã", "–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞"]:
    schedule_display[col] = schedule_display[col] * usd_to_uzs

st.success(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: **{payment_display} {currency}**")
st.info(f"–°—Ä–æ–∫: **{term}**")
st.warning(f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: **{overpayment_display} {currency}**")

if balances:
    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞")
    st.line_chart(pd.DataFrame({"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": balances_display}))

    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º")
    st.dataframe(schedule_display)

    st.subheader("üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã")
    pie_data = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–¢–µ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞", "–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"],
        "–°—É–º–º–∞": [price_input - down_payment_input, overpayment_display]
    })
    fig = px.pie(pie_data, names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', values='–°—É–º–º–∞', title='–î–æ–ª—è –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞')
    st.plotly_chart(fig)
